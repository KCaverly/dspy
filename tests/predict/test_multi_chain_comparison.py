import dspy
from dspy.utils import DummyLM, DummyLanguageModel, clean_up_lm_test
from dspy.backends import TemplateBackend


@clean_up_lm_test
def test_basic_example():
    class BasicQA(dspy.Signature):
        """Answer questions with short factoid answers."""

        question = dspy.InputField()
        answer = dspy.OutputField(desc="often between 1 and 5 words")

    # Example completions generated by a model for reference
    completions = [
        dspy.Prediction(
            rationale="I recall that during clear days, the sky often appears this color.",
            answer="blue",
        ),
        dspy.Prediction(
            rationale="Based on common knowledge, I believe the sky is typically seen as this color.",
            answer="green",
        ),
        dspy.Prediction(
            rationale="From images and depictions in media, the sky is frequently represented with this hue.",
            answer="blue",
        ),
    ]

    # Pass signature to MultiChainComparison module
    compare_answers = dspy.MultiChainComparison(BasicQA)

    # Call the MultiChainComparison on the completions
    question = "What is the color of the sky?"
    lm = DummyLM(["my rationale", "blue"])
    dspy.settings.configure(lm=lm)
    final_pred = compare_answers(completions, question=question)

    assert final_pred.rationale == "my rationale"
    assert final_pred.answer == "blue"


@clean_up_lm_test
def test_basic_example_with_backend():
    class BasicQA(dspy.Signature):
        """Answer questions with short factoid answers."""

        question = dspy.InputField()
        answer = dspy.OutputField(desc="often between 1 and 5 words")

    # Example completions generated by a model for reference
    completions = [
        dspy.Prediction(
            rationale="I recall that during clear days, the sky often appears this color.",
            answer="blue",
        ),
        dspy.Prediction(
            rationale="Based on common knowledge, I believe the sky is typically seen as this color.",
            answer="green",
        ),
        dspy.Prediction(
            rationale="From images and depictions in media, the sky is frequently represented with this hue.",
            answer="blue",
        ),
    ]

    # Pass signature to MultiChainComparison module
    compare_answers = dspy.MultiChainComparison(BasicQA)

    # Call the MultiChainComparison on the completions
    question = "What is the color of the sky?"
    lm = DummyLanguageModel(answers=[["my rationale\n\nAnswer: blue"]])
    backend = TemplateBackend(lm=lm)
    dspy.settings.configure(backend=backend, cache=False)
    final_pred = compare_answers(completions, question=question)

    assert final_pred.rationale == "my rationale"
    assert final_pred.answer == "blue"
